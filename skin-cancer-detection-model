import os
import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from sklearn.metrics import classification_report
from tensorflow.keras.preprocessing import image

# Set paths for dataset
BASE_DIR = '/path/to/dataset'  # Replace with your dataset path
TRAIN_DIR = os.path.join(BASE_DIR, 'train')
VALIDATION_DIR = os.path.join(BASE_DIR, 'validation')
TEST_DIR = os.path.join(BASE_DIR, 'test')

# Hyperparameters
IMG_HEIGHT, IMG_WIDTH = 224, 224
BATCH_SIZE = 32
EPOCHS = 10
NUM_CLASSES = 2  # Adjust based on your dataset

# Data augmentation and preprocessing
train_datagen = ImageDataGenerator(rescale=1.0/255.0,
                                   rotation_range=20,
                                   width_shift_range=0.2,
                                   height_shift_range=0.2,
                                   shear_range=0.2,
                                   zoom_range=0.2,
                                   horizontal_flip=True)

validation_datagen = ImageDataGenerator(rescale=1.0/255.0)
test_datagen = ImageDataGenerator(rescale=1.0/255.0)

train_generator = train_datagen.flow_from_directory(TRAIN_DIR,
                                                     target_size=(IMG_HEIGHT, IMG_WIDTH),
                                                     batch_size=BATCH_SIZE,
                                                     class_mode='binary')

validation_generator = validation_datagen.flow_from_directory(VALIDATION_DIR,
                                                               target_size=(IMG_HEIGHT, IMG_WIDTH),
                                                               batch_size=BATCH_SIZE,
                                                               class_mode='binary')

test_generator = test_datagen.flow_from_directory(TEST_DIR,
                                                   target_size=(IMG_HEIGHT, IMG_WIDTH),
                                                   batch_size=BATCH_SIZE,
                                                   class_mode='binary',
                                                   shuffle=False)

# Build AlexNet model
def build_alexnet(input_shape, num_classes):
    model = Sequential([
        Conv2D(96, (11, 11), strides=4, activation='relu', input_shape=input_shape),
        MaxPooling2D((3, 3), strides=2),
        Conv2D(256, (5, 5), padding='same', activation='relu'),
        MaxPooling2D((3, 3), strides=2),
        Conv2D(384, (3, 3), padding='same', activation='relu'),
        Conv2D(384, (3, 3), padding='same', activation='relu'),
        Conv2D(256, (3, 3), padding='same', activation='relu'),
        MaxPooling2D((3, 3), strides=2),
        Flatten(),
        Dense(4096, activation='relu'),
        Dropout(0.5),
        Dense(4096, activation='relu'),
        Dropout(0.5),
        Dense(num_classes, activation='softmax' if num_classes > 2 else 'sigmoid')
    ])
    return model

# Compile the model
model = build_alexnet((IMG_HEIGHT, IMG_WIDTH, 3), NUM_CLASSES)
model.compile(optimizer='adam',
              loss='binary_crossentropy' if NUM_CLASSES == 2 else 'categorical_crossentropy',
              metrics=['accuracy'])

# Train the model
history = model.fit(train_generator,
                    epochs=EPOCHS,
                    validation_data=validation_generator)

# Evaluate the model
test_loss, test_accuracy = model.evaluate(test_generator)
print(f"Test Accuracy: {test_accuracy:.2f}")

# Generate classification report
y_true = test_generator.classes
y_pred = np.argmax(model.predict(test_generator), axis=-1) if NUM_CLASSES > 2 else (model.predict(test_generator) > 0.5).astype("int32").flatten()
print(classification_report(y_true, y_pred, target_names=list(test_generator.class_indices.keys())))

# Save the model
model.save('alexnet_skin_cancer_model.h5')

# Test case to verify the model
def test_model(image_path, model_path='alexnet_skin_cancer_model.h5'):
    model = tf.keras.models.load_model(model_path)
    img = image.load_img(image_path, target_size=(IMG_HEIGHT, IMG_WIDTH))
    img_array = image.img_to_array(img) / 255.0
    img_array = np.expand_dims(img_array, axis=0)
    prediction = model.predict(img_array)
    if NUM_CLASSES > 2:
        predicted_class = np.argmax(prediction)
    else:
        predicted_class = int(prediction[0][0] > 0.5)
    class_labels = {v: k for k, v in test_generator.class_indices.items()}
    return class_labels[predicted_class]

# Example usage of test case
print(test_model('/path/to/sample/image.jpg'))
